Desenvolvimento avançado em Java

### Paradigma Funcional
## Paradigma Funcional no Java
Programação funcional é o processo de construir software através de composição de funções puras, evitando compartilhamento de estados, dados mutáveis e efeitos colaterais. É declarativa ao invés de imperativa, essa é uma definição de Eric Elliott.

# Paradigma Imperativo: É aquele que expressa o código através de comandos ao computador, nele é possível ter controle de estado dos objetos.

# Paradigma Funcional: Damos uma regra, uma declaração de como queremos que o programa se comporte.


## Conceitos fundamentais da programação funcional
# Composição de funções: é criar uma nova função através da composição de outras. Por exemplo, vamos criar uma função que vai filtrar um array, filtrando somente os números pares e multiplicando por dois.

# Funções Puras: É chamada de pura quando invocada mais de uma vez produz exatamente o mesmo resultado.

# Imutabilidade: Significa que uma vez que uma variável que recebeu um valor, vai possuir esse valor para sempre, ou quando criamos um objeto ele não pode ser modificado.

## Imperativo x Declarativo
É muito comum aprender a programar de forma imperativa, onde mandamos alguém fazer algo. Busque o usuário 15 no banco de dados. Valide essas informações do usuário.
Na programação funcional tentamos programar de forma declarativa, onde declaramos o que desejamos, sem explicitar como será feito. Qual o usuário 15? Quais os erros dessas informãções?


## Lambda e API Lambda do Java 8
# Lambda no Java
Os lambdas obedecem o conceito do paradigma funcional, com eles podemos facilitar legibilidade do nosso código, além disso com a nova API Funcional do Java podemos ter uma alta produtividade para lidar com objetos.
Primeiramente, devemos entender o que são interfaces funcionais.

Interfaces funcionais: São interfaces que possuem apenas um método abstrato. Exemplo:

public interface Funcao {
	String gerar(String valor);
}

Geralmente as interfaces funcionais possuem uma anotação em nível de classe (@FunctionalInterface), para forçar o compilador a apontar um erro se a interface não estiver de acordo com as regras de uma interface funcional. Esta anotação não é obrigatória, pois o compilador consegue reconhecer uma interface em tempo de compilação.

Antes do Java 8, se quiséssemos implementar um comportamento específico para uma única classe deveríamos utilizar uma classe anônima para implementar este comportamento.
Agora que sabemos como se define uma interface funcional, podemos aprender como se define uma lambda.
Estrutura de uma lambda:

InterfaceFuncional nomeVariavel = parametro -> logica

Bastante atenção!!!
- Quando uma lambda possui apenas uma instrução no corpo de sua lógica não é necessário o uso de chaves. Ex:

Funcao colocarPrefixoSenhorNaString = valor -> "Sr. "+valor;

- Se a função possui mais de uma instrução DEVEMOS utilizar chaves e além disso deve explicitar o retorno se o retorno for diferente de void. Ex:

Funcao colocarPrefixoSenhorNaString = valor -> {
	String valorComprefixo = "Sr. "+valor;
	String valorComPrefixoEPontoFinal = valorComprefixo+".";
	return valorComPrefixoEPontoFinal;
};


## Recursividade
Na recursividade, uma função chama a si mesma repetidamente, até atingir uma condição de parada. No caso de Java, um método chama a si mesmo, passando para si objetos primitivos. Cada chamada gera uma nova entrada na pilha de execução, e alguns dados podem ser disponibilizados em um escopo global ou local, através de parâmetros em um escopo global ou local.
Recursividade tem um papel importante em programação funcional, facilitando que evitemos estados mutáveis e mantenhamos nosso programa mais declarativo, e menos imperativo.

# Tail Call (Recursividade em cauda): Recursão em cauda é uma recursão onde não há nenhuma linha de código após a chamada do próprio método e, sendo assim, não há nenhum tipo de processamento a ser feito após a chamada recursiva.
Obs: a JVM não suporta a recursão em cauda, ele lança um estouro de pilha (StackOverFlow).

# Memoization: é uma técnica de otimização que consiste no cache do resultado de uma função, baseado nos parâmetros de entrada. Com isso, nas seguintes execuções conseguimos ter uma resposta mais rápida.



### Interfaces funcionais
## Funções de alta ordem
É uma função que retorna uma função ou que recebe uma função como parâmetro.

## Consumer
Interface, recebem um parâmetro, mas não retornam nada

## Functions
Interface, recebem um parâmetro, mas retornam um parâmetro também

## Predicate
Interface, recebem um parâmetro, retornam um boolean

## Supplier
Não recebem parâmetro e retornam algo do tipo especificado



### Processamento Assíncrono e Paralelo
## Threads
Thread é um pequeno programa que trabalha como um subsistema, sendo uma forma de um processo se autodividir em duas ou mais tarefas. Essas tarefas múltiplas podem ser executadas simultaneamente para rodar mais rápido do que um programa em um único bloco ou praticamente juntas.

## Processamento síncrono e assíncrono
O processamento síncrono, são todos os processamentos que ocorrem em sequência (sincronia). Os processos são executados em fila. É preciso que um processo termine para que outro processo seja executado. Ex: imagine você lavando louça e de repente você se lembra que tem que fazer uma ligação. A ligação só poderá ser realizada quando o processo lavar louça for finalizada.

Quando dois ou mais processos são realizados ao mesmo tempo, é dado o nome de processamento assíncrono. Os processos são realizados simultaneamente sem que um processo necessite que outro termine para ser executado. Ex: lavar louça e falar ao telefone ao mesmo tempo. Se você não sabe como fazer isso, prenda o telefone entre a cabeça e o ombro e tenha as mãos livres para lavar louça.


## Parallel Streams
Empregado em grandes processamentos de dados e quando um não depende do outro.
Viável com número grande de dados.


### Por dentro da modularização do Java
## Jigsaw
Há muito tempo se diz sobre modularizar a plataforma Java. É um plano que começou desde antes do Java 7, foi uma possibilidade no Java 8 e por fim, para permitir mais tempo de desenvolvimento, revisão e testes, foi movido para o Java 9.
O projeto Jigsaw, como foi chamado, é composto por uma série de JEPs. Algumas delas inclusive já disponíveis no Java 8, como os conhecidos Compact Profiles. A idéia por trás do projeto não é só criar um sistema de módulos, que poderemos usar em nossos projetos, mas também aplicá-lo em toda a plataforma JDK em busca de melhor organização e desempenho.
Por padrão, todo sistema modular já vem com o módulo java.base, contendo a String e todo java.lang, java.io, java.util e demais pacotes muitas vezes essenciais para a esmagadora maioria dos projetos.

IntelliJ Idea:
File > New > Project
Java > SDK: 11
src > New > Package > digital.innovation.one
digital.innovation.one > New > Java Class > Main

Projeto > botão direito mouse > New > Modular > SDK: 11 > Criar
Module > src > New > Package > digital.innovation.one.core
digital.innovation.one.core > New > Java Class > Runner
Module > src > botão direito mouse > New module-info.java
module-info.java: exports digital.innovation.one.utils;
module-info.java: requires digital.innovation.one.utils;


### Novidades do Java 10
## Inferências (uso do var)
- var é apenas para variáveis locais. Precisa estar dentro de um escopo:
	dentro de um for ou enhanced for
	while
	try with resource
	corpo de um método
	variável local inicializado
- var não pode ser usado a nível de classe
- var não pode ser usado como parâmetro
- var não pode ser usada em variáveis locais não inicializadas

## Docker
Terminal:
// Testando o docker no Java 7
docker container run -it -m512M --entrypoint bash openjdk:7-jdk
JAVA -XX:+PrintFlagsFinal -version
JAVA -XX:+PrintFlagsFinal -version | grep MaxHeapSize
exit

docker ps -a //ver as imagens dos jdk

// Java 10
docker run -it -m512M --entrypoint bash openjdk:10-jdk
java -XX:+PrintFlagsFinal -version | grep MaxHeapSize


// Limitação do uso de CPU
docker container run -it --cpus 2 openjdk:10-jdk
Runtime.getRuntime().availableProcessors()
// 2 CPUs disponíveis

docker container run -it --cpus 1 openjdk:10-jdk
Runtime.getRuntime().availableProcessors()
// 1 CPU disponível



### Novidades do Java 11
## HTTP Client API
Um dos recursos que foram incluídos na próxima versão do JDK11 é a API do cliente HTTP padronizada que visa subtituir a classe HttpUrlConnection legada, que está presente no JDK desde os primeiros anos do Java. O problema com essa API antiga é descrito na proposta de aprimoramento, principalmente porque agora ela é considerada antiga e difícil de usar.
A nova API suporta HTTP / 1.1 e HTTP / 2. A versão mais recente do protocolo HTTP foi projetada para melhorar o desempenho geral do envio de solicitações por um cliente e do recebimento de respostas do servidor. Isso é conseguido através da introdução de várias alterações, como multiplexação de fluxo, compactação de cabeçalho e Push Promise. Além disso, o novo client HTTP também suporta nativamente WebSockets.

HTTP2: Multiplexação das requisições

## APIs


## Inferência nas lambdas
