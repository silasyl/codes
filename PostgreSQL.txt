### Introdução ao banco de dados PostgreSQL
## Fundamentos de banco de dados
# O que são dados?
Valores brutos, fatos brutos, observações documentadas, registros soltos, que são recolhidos e armazenados sem sofrer qualquer tratamento.

# O que são informações?
Estruturação de dados, organização de dados.
Conjunto de dados relacionados entre si que geram valor, que criam sentido aos dados.
Material do conhecimento.


## Modelo relacional
# Definição
Modelo mais comum, que classifica e organiza as informações em tabelas com linhas e colunas.
As linhas, ou tuplas, são os dados organizados, são valores das tabelas, e as colunas são os atributos destes dados.

# Tabelas
Conjuntos de dados dispostos em colunas e linhas referentes a um objetivo comum.
As colunas são consideradas como "campos da tabela", como atributos da tabela.
As linhas de uma tabela são chamadas também de tuplas, e é onde estão contidos os valores, os dados.

# O que pode ser definido como tabelas?
- Coisas tangíveis
	Elementos físicos (carro, produto, animal)
- Funções
	Perfis de usuário, status de compra
- Eventos ou ocorrências
	Produtos de um pedido, histórico de dados

# Colunas importantes
- Chave Primária / Primary Key / PK
	Conjunto de um ou mais campos que nunca se repetem. Identidade da tabela. São utilizados como índice de referência na criação de relacionamentos entre tabelas.
- Chave Estrangeira / Foreing Key / FK
	Valor de referência a uma PK de outra tabela da mesma tabela para criar um relacionamento.

# Sistemas de gerenciamento de banco de dados
Ou Sistemas de gestão de base de dados.
Chamamos pela sigla SGBD.
Conjunto de programas ou softwares responsáveis pelo gerenciamento de um banco de dados.
Programas que facilitam a administração de um banco de dados.
Exemplos:
Oracle Database, PostgreSQL, MySQL, Microsoft SQL Server, mongoDB, elasticsearch, IBM DB2


## Introdução ao PostgreSQL
# O que é o PostgreSQL?
Sistema de gerenciamento de banco de dados objeto relacional.
Teve início no Departamento de Ciência da Computação na Universidade da Califórnia em Berkeley em 1986.
SGBD Opensource.

# Arquitetura multiprocessos
# Modelo cliente / servidor
# Principais características
- OpenSource
- Point in time recovery
- Linguagem procedural com suporte a várias linguagens de programação (perl, python, etc)
- Views, functions, procedures, triggers
- Consultas complexas e Common table expressions (CTE)
- Suporte a dados geográficos (PostGIS)
- Controle de concorrência multi-versão

# Instalação e documentação do PostgreSQL
http://www.postgresql.org/
http://www.postgresql.org/download/
http://www.postgresql.org/docs/manuals/


## Instalação do PostgreSQL no Ubuntu
http://www.postgresql.org/download/linux/ubuntu/
- Como root, criar o arquivo:
touch /etc/apt/sources.list.d/pgdg.list
- Adicionar o conteúdo:
echo "deb http://apt.postgresql.org/pub/repos/apt/bionic-pgdg main" > /etc/apt/sources.list.d/pgdg.list
- Importar a chave do repositório oficial:
wget --quiet -O -https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
- Atualizar os repositórios:
sudo apt-get update
- Instalar o PostgreSQL:
apt-get install postgresql-11

pg_lsclusters: lista os clusters ativos no SO
pg_createcluster -d /home/postgres/aula 11 aula --start: cria um cluster versão 11 de nome aula
psql: ver se o psql está acessível

# pgAdming4
Interface gráfica
https://www.pgadmin.org/

- Instalar o pgAdmin4:
apt-get install pgadmin4

pgadmin4 > Chama o pgAdmin4
Endereço url para acessá-lo

## Instalação do PostgreSQL no CentOS/Red Hat
## Instalação do PostgreSQL no Windows


### Configurações do PostgreSQL
## O arquivo postgresql.conf
# Definição
Arquivo onde estão definidas e armazenadas todas as configurações do servidor PostgreSQL.
Alguns parâmetros só podem ser alterados com uma reinicialização do banco de dados.
A view pg_settings, acessada por dentro do banco de dados, guarda todas as configurações atuais.
Ao acessar a view pg_settings, é possível visualizar todas as configurações atuais:

SELECT name, setting
FROM pg_settings;

Ou é possível usar o comando:

SHOW [parâmetro];

# Localização do arquivo postgresql.conf
Por padrão, encontra-se dentro do diretório PGDATA definido no momento da inicialização do cluster de banco de dados.
No sistema operacional Ubuntu, se o PostgreSQL foi instalado a partir do repositório oficial, o local do arquivo postgresql.conf será diferente do diretório de dados.
/etc/postgresql/[versão]/[nome do cluster]/postgresql.conf

# Configurações de conexão
- LISTEN_ADDRESSES
Endereço(s) TCP/IP das interfaces que o servidor PostgreSQL vai escutar/liberar conexões.
Obs: Não usar LISTEN_ADDRESSES * (acesso liberado)
- PORT
A porta TCP que o servidor PostgreSQL vai ouvir. O padrão é 5432.
- MAX_CONNECTIONS
Número máximo de conexões simultâneas no servidor PostgreSQL
- SUPERUSER_RESERVED_CONNECTIONS
Número de conexões (slots) reservadas para conexões ao banco de dados de super usuários.

# Configurações de autenticação
- AUTHENTICATION_TIMEOUT
Tempo máximo em segundos para o cliente conseguir uma conexão com o servidor.
- PASSWORD_ENCRYPTION
Algoritmo de criptografia das senhas dos novos usuários criados no banco de dados.
- SSL
Habilita a conexão criptografada por SSL
(Somente se o PostgreSQL foi compilado com suporte SSL)

# Configurações de memória
- SHARED_BUFFERS
Tamanho da memória compartilhada do servidor PostgreSQL para cache/buffer de tabelas, índices e demais relações.
- WORK_MEM
Tamanho da memória para operações de agrupamento e ordenação (ORDER BY, DISTINCT, MERGE JOINS).
- MAINTENANCE_WORK_MEM
Tamanho da memória para operações como VACUUM, INDEX, ALTER TABLE.


## O arquivo pg_hba.conf
# Definição
Arquivo responsável pelo controle de autenticação dos usuários no servidor PostgreSQL.
O formato do arquivo contém informações:

local/host/hostssl/hostnossl
database
user
auth-method / address / IP-address
auth-method / IP-mask
[auth-options]
Obs: Não usar ADDRESS 0.0.0.0/0 (acesso liberado)

# Métodos de autenticação
- TRUST (conexão sem requisição de senha)
- REJECT (rejeitar conexões)
- MD5 (criptografia md5)
- PASSWORD (senha sem criptografia)
- GSS (generic security service application program interface)
- SSPI (security support provider interface - somente para Windows)
- KRB5 (kerberos V5)
- IDENT (utiliza o usuário do sistema operacional do cliente via ident server)
- PEER (utiliza o usuário do sistema operacional do cliente)
- LDAP (ldap server)
- RADIUS (radius server)
- CERT (autenticação via certificado ssl do cliente)
- PAM (pluggable authentication modules. O usuário precisa estar no banco de dados)


## O arquivo pg_ident.conf
# Definição
Arquivo responsável por mapear os usuários do sistema operacional com os usuários do banco de dados.
Localizado no diretório de dados PGDATA de sua instalação.
A opção ident deve ser utilizada no arquivo pg_hba.conf


## Comandos administrativos
# Ubuntu:
- pg_lsclusters
Lista todos os clusters PostgreSQL
- pg_createcluster <version> <cluster name>
Cria um novo cluster PostgreSQL
- pg_dropcluster <version> <cluster name>
Apaga um cluster PostgreSQL
- pg_ctlcluster <version> <cluster> <action>
Start, Stop, Status, Restart de clusters PostgreSQL

# Windows:
Serviços > Botão direito do mouse em postgresql-x64-10

# Binários do PostgreSQL:
- createdb
- createuser
- dropdb
- dropuser
- initdb
- pg_ctl
- pg_basebackup
- pg_dump / pg_dumpall
- pg_restore
- psql
- reindexdb
- vacuumdb


## Arquitetura / Hierarquia
# Cluster
Coleção de bancos de dados que compartilham as mesmas configurações (arquivos de configuração) do PostgreSQL e do sistema operacional (porta, listen_addresses, etc).

# Banco de dados (database)
Conjunto de schemas com seus objetos/relações (tabelas, funções, views, etc).

# Schema
Conjunto de objetos/relações (tabelas, funções, views, etc).


## PGAdmin
# Importante para conexão:
1- Liberar acesso ao cluster em postgresql.conf
2- Liberar acesso ao cluster para o usuário do banco de dados em pg_hba.conf
3- Criar/editar usuários

# Visão geral do pgAdmin4
psql -h 127.0.0.1 -p 5432 -U postgres [bd]: endereço de host do banco de dados (ex) com a porta 5432 com o usuário postgres. [bd] é opcional, pode-se conectar a outros bancos de dados, o padrão é do usuário

Para linux:
ALTER USER postgres PASSWORD '123';: muda a senha para 123
\q: sai
psql: entra

Arquivo pg_hba.conf:
host: conexão com servidor remotor
local: servidor local
METHOD: peer: user e BD liberados.

Mudar peer para md5 (forçar uma senha)
pg_ctlcluster 10 aula reload: reload da configuração do pg_hba.conf

# Configurar acesso ao servidor PostgreSQL
# Visão geral do cluster e nosso primeiro comando

Browser: Servers > Object > Create > Server Group... > AULA
AULA > Object > Create > Server... > AULA
Connection: Host name/address: 127.0.0.1
Save

Objetos do BD:
- Casts: Convenções de tipos
- Catalogs: Catálogos do BD
- Event Triggers: Gatilhos baseados em eventos do BD
- Extensions: Extensões
- Foreign Data Wrappers: Quando pode se conectar a outro BD como mySQL, Oracle, csv
- Languages: Linguagens configuradas
- Schemas: Grupos de objetos

Dashbord:
Database sessions: sessões dentro do BD
Transactions per second: Todas as transações, commits, rollbacks no BD por segundo
Tuples in: quantidade de tuplas que estão sendo inseridas no BD
Tuples out: quantidade de tuplas que estão saindo do BD
Block I/O: Blocos de input output
Sessions: Todas as sessões conectadas e o que cada uma está fazendo no BD
Locks: Se há alguma conexão lockando outra
Prepared Transactions: Alguns comandos preparados que podem estar engatilhados para estarem disponíveis

Botão direito no Databases:
Create > Database... > 

postgres > Tools > Query Tool
CREATE DATABASE auladb; :Cria o DB
Fechar o Query Editor postgres/postgres@AULA (BD postgres usuário postgres grupo AULA)

auladb > Tools > Query Tool (auladb/postgres@AULA)
SELECT 1;


## Usuários
# Conceitos users/roles/groups
- Definição:
Roles (papéis ou funções), users (usuários) e grupo de usuários são "contas", perfis de atuação em um banco de dados, que possuem permissões em comum ou específicas.
Nas versões anteriores do PostgreSQL 8.1, usuários e roles tinham comportamentos diferentes.
Atualmente, roles e users são alias.
É possível que roles pertençam a outras roles.

# Administrando users/roles/groups
CREATE ROLE name [[WITH] option [...]]

where option can be:
SUPERUSER | NOSUPERUSER: tem permissões quase irrestritas no BD
| CREATEDB | NOCREATEDB: tem permissão de criar novo BD
| CREATEROLE | NOCREATEROLE: pode criar novas roles
| INHERIT | NOINHERIT: a role herda permissões de outra role
| LOGIN | NOLOGIN: a role pode se conectar no BD
| REPLICATION | NOREPLICATION: fazer backup via PGB
| BYPASSRLS | NOBYPASSRLS: Bypass role level security
| CONNECTION LIMIT connlimit: quantas conexões simultâneas pode ter
| [ENCRYPTED] PASSWORD 'password' | PASSWORD NULL: Senha criptografada
| VALID UNTIL 'timestamp': Até que data a role tem acesso
| IN ROLE role_name [, ...]: a nova role vai pertencer a IN ROLE
| IN GROUP role_name [, ...]: Usa junto com IN ROLE
| ROLE role_name [, ...]: A role informada passa a pertencer a nova role
| ADMIN role_name [, ...]: As roles passarão a ter acessos Admin
| USER role_name [, ...]: 
| SYSID uid: deprecada

Exemplo:
CREATE ROLE administradores
	CREATEDB
	CREATEROLE
	INHERIT
	NOLOGIN
	REPLICATION
	BYPASSRLS
	CONNECTION LIMIT -1;

CREATE ROLE professores
	NOCREATEDB
	NOCREATEROLE
	INHERIT
	NOLOGIN
	NOBYPASSRLS
	CONNECTION LIMIT 10;

CREATE ROLE alunos
	NOCREATEDB
	NOCREATEROLE
	INHERIT
	NOLOGIN
	NOBYPASSRLS
	CONNECTION LIMIT 90;

# Associação entre roles:
Quando uma role assume as permissões de outra role.
Necessária a opção INHERIT
No momento de criação da role:
- IN ROLE (passa a pertencer a role informada)
- ROLE (a role informada passa a percenter a nova role)
Ou após a criação da role:
- GRANT [role a ser concedida] TO [role a assumir as permissões]

Exemplo:
CREATE ROLE professores
	NOCREATEDB
	NOCREATEROLE
	INHERIT
	NOLOGIN
	NOBYPASSRLS
	CONNECTION LIMIT -1;

CREATE ROLE daniel LOGIN CONNECTION LIMIT 1 PASSWORD '123' IN ROLE professores;
- A role daniel passa a assumir as permissões da role professores

CREATE ROLE daniel LOGIN CONNECTION LIMIT 1 PASSWORD '123' ROLE professores;
- A role professores passa a fazer parte da rola daniel assumindo suas permissões

CREATE ROLE daniel LOGIN CONNECTION LIMIT 1 PASSWORD '123';
GRANT professores TO daniel;

# Desassociar membros entre roles:
REVOKE [role que será revogada] FROM [role que terá suas permissões revogadas]
Ex: REVOKE professores FROM daniel;

# Alterando uma role:
ALTER ROLE role_specification [WITH] option [...]

where option can be:

SUPERUSER | NOSUPERUSER: tem permissões quase irrestritas no BD
| CREATEDB | NOCREATEDB: tem permissão de criar novo BD
| CREATEROLE | NOCREATEROLE: pode criar novas roles
| CREATEUSER | NOCREATEUSER
| INHERIT | NOINHERIT: a role herda permissões de outra role
| LOGIN | NOLOGIN: a role pode se conectar no BD
| REPLICATION | NOREPLICATION: fazer backup via PGB
| BYPASSRLS | NOBYPASSRLS: Bypass role level security
| CONNECTION LIMIT connlimit: quantas conexões simultâneas pode ter
| [ENCRYPTED | UNENCRYPTED] PASSWORD 'password' | PASSWORD NULL: Senha criptografada
| VALID UNTIL 'timestamp': Até que data a role tem acesso

# Excluindo uma role:
DROP ROLE role_specification;

pgAdmin4:
auladb > Tools > Query Tool (auladb/postgres@AULA)
CREATE ROLE professores NOCREATEDB NOCREATEROLE INHERIT NOLOGIN NOBYPASSRLS CONNECTION LIMIT 10;

Terminal:
psql
\du: lista todas as roles criadas no BD
SELECT * FROM pg_roles ; : mostra todas as roles disponíveis no BD

Colocar senha para professores:
pgAdmin4:
ALTER ROLE professores PASSWORD '123';

Terminal:
\q : Sair do BD
psql -U professores auladb :conectar passando o usuário professores se conectando no auladb. Mostra que não há permissão.

pgAdmin4:
CREATE ROLE daniel LOGIN PASSWORD '123';

Terminal:
\du:
Mostra que há as duas roles

pgAdmin4:
-- CREATE ROLE daniel LOGIN PASSWORD '123'; : -- comenta
DROP ROLE daniel;
CREATE ROLE daniel LOGIN PASSWORD '123' IN ROLE professores;


# Administrando acessos (GRANT)
- Definição:
São os privilégios de acesso aos objetos do banco de dados.
Privilégios:
-- tabela 					-- function
--coluna 					--language
--sequence 					--large object
-- database 				-- schema
--domain 					--tablespace
--foreign data wrapper 		--type
--foreign server

- DATABASE
GRANT{{CREATE | CONNECT | TEMPORARY | TEMP}[...] | ALL [PRIVILEGES]}
	ON DATABASE database_name [, ...]
	TO role_specification [, ...][WITH GRANT OPTION]

- SCHEMA
GRANT{{CREATE | USAGE}[, ...] | ALL [PRIVILEGES]}
	ON SCHEMA schema_name [, ...]
	TO role_specification [, ...][WITH GRANT OPTION]

- TABLE
GRANT{{SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER} [, ...] | ALL [PRIVILEGES]}
	ON {[TABLE] table_name [, ...] | ALL TABLES IN SCHEMA schema_name [, ...]}
	TO role_specification [, ...][WITH GRANT OPTION]

# REVOKE
Retira as permissões da role

- DATABASE
REVOKE [GRANT OPTION FOR]
{{CREATE | CONNECT | TEMPORARY | TEMP}[, ...] | ALL [PRIVILEGES]}
ON DATABASE database_name [, ...]
FROM {[GROUP] role_name | PUBLIC} [, ...]
[CASCADE | RESTRICT]

- SCHEMA
REVOKE [GRANT OPTION FOR]
{{CREATE | USAGE}[, ...] | ALL [PRIVILEGES]}
ON SCHEMA schema_name [, ...]
FROM {[GROUP] role_name | PUBLIC} [, ...]
[CASCADE | RESTRICT]

- TABLE
REVOKE [GRANT OPTION FOR]
{{SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER} [, ...] | ALL [PRIVILEGES]}
ON {[TABLE] table_name [, ...] | ALL TABLES IN SCHEMA schema_name [, ...]}
FROM {[GROUP] role_name | PUBLIC} [, ...]
[CASCADE | RESTRICT]

- Revogando todas as permissões (simplificado)
REVOKE ALL ON ALL TABLES IN SCHEMA [schema] FROM [role];
REVOKE ALL ON SCHEMA [schema] FROM [role];
REVOKE ALL ON DATABASE [database] FROM [role];

pgAdmin4:
DROP ROLE daniel;
CREATE TABLE teste (nome varchar);
GRANT ALL ON TABLE teste TO professores;
CREATE ROLE daniel LOGIN PASSWORD '123';

Terminal:
psql -U daniel auladb (acessou)
SELECT nome FROM teste; (permissão negada)

pgAdmin4:
DROP ROLE daniel;
CREATE ROLE daniel INHERIT LOGIN PASSWORD '123' IN ROLE professores;

Terminal:
psql -U daniel auladb (acessou)
SELECT nome FROM teste; (acesso)

pgAdmin4:
REVOKE professores FROM daniel;


### Objetos e comandos do banco de dados
## Database/Schemas/Objetos
# Database
É o banco de dados.
Grupo de schemas e seus objetos, como tabelas, types, views, funções entre outros.
Seus schemas e objetos não podem ser compartilhados entre si.
Cada database é separado um do outro compartilhando apenas usuários/roles e configurações do cluster PostgreSQL.

# Schemas
É um grupo de objetos, como tabelas, types, views, funções, entre outros.
É possível relacionar objetos entre diversos schemas.
Por exemplo: schema public e schema curso podem ter tabelas com o mesmo nome (teste por exemplo) relacionando-se entre si.

# Objetos
São as tabelas, views, funções, types, sequences, entre outros, pertencentes aos schemas.

# Database
CREATE DATABASE name
	[[WITH][OWNER [=] user_name]
		[TEMPLATE [=] template]
		[ENCODING [=] encoding]
		[LC_COLLATE [=] lc_collate]
		[TABLESPACE [=] tablespace_name]
		[ALLOW_CONNECTIONS [=] allowconn]
		[CONNECTION LIMIT [=] connlimit
		[IS_TEMPLATE [=] istemplate]]

ALTER DATABASE name RENAME TO new_name
ALTER DATABASE name OWNER TO {new_owner | CURRENT_USER | SESSION_USER}
ALTER DATABASE name SET TABLESPACE new_tablespace

DROP DATABASE [nome]

# Schema
CREATE SCHEMA schema_name [AUTHORIZATION role_specification]

ALTER SCHEMA name RENAME TO new_name
ALTER SCHEMA name OWNER TO {new_owner | CURRENT_USER | SESSION_USER}

DROP SCHEMA [nome]

- Melhores práticas:
CREATE SCHEMA IF NOT EXISTS schema_name [AUTHORIZATION role_specification]
DROP SCHEMA IF EXISTS [nome];


## Tabelas/Colunas/Tipos de dados
# Definição
Conjuntos de dados dispostos em colunas e linhas referentes a um objetivo comum.
As colunas são consideradas como "campos da tabela", como atributos da tabela.
As linha de uma tabela são chamadas também de tuplas, e é onde estão contidos os valores, os dados.

Exemplo:
TABELA = automovel
COLUNA 1 = tipo (carro, moto, aviao, helicoptero)
COLUNA 2 = ano_fabricacao (2010, 2011, 2020)
COLUNA 3 = capacidade_pessoas (1, 2, 350)
COLUNA 4 = fabricante (Honda, Avianca, Yamaha)

TABELA = produto
COLUNA 1 = codigo serial do produto
COLUNA 2 = tipo (vestuário, eletronico, beleza)
COLUNA 3 = preco

# Primary Key / Chave Primária / PK
No conceito de modelo de dados relacional e obedecendo as regras de normalização, uma PK é um conjunto de um ou mais campos que nunca se repetem em uma tabela e que seus valores garantem a integridade do dado único e a utilização do mesmo como referência para o relacionamento entre demais tabelas.
- Não pode haver duas ocorrências de uma mesma entidade com o mesmo conteúdo da PK
- A chave primária não pode ser composta por atributo opcional, ou seja, atributo que aceite nulo.
- Os atributos identificadores devem ser o conjunto mínimo que pode identificar cada instância de uma entidade.
- Não devem ser usadas chaves externas.
- Não deve conter informação volátil.

# Foreign Key / Chave Estrangeira / FK
Campo, ou conjunto de campos que são referências de chaves primárias de outras tabelas ou da mesma tabela.
Sua principal função é garantir a integridade referencial entre tabelas.

# Tipos de dados
 Numeric types 				UUID Type
Monetary Types 				XML Type
 Character Types 			JSON Types
Binary Data Types 			Arrays
 Date/Time Types 			Composite Types
 Boolean Types 				Range Types
Enumerated Types 			Domain Types
Geometric Types 			Object Identifier Types
Network Address Types 		pg_lsn Type
Bit String Types 			Pseudo-Types
Text Search Types

# Numéricos
- smallint
- integer
- bigint
- decimal
- numeric
- real
- double precision
- smallserial
- serial
- bigserial

# Caracteres
- character varying(n), varchar(n)
- character(n), char(n)
- text

# Datas
- timestamp [(p)][without time zone]
- timestamp [(p)] with time zone
- date
- time [(p)][without time zone]
- time [(p)] with time zone
- interval [fields][(p)]

# Booleanos
- boolean


## DML e DDL
# DML
Data Manipulation Language
Linguagem de manipulação de dados
INSERT, UPDATE, DELETE, SELECT
* o select, alguns consideram como DML, outros como DQL, que significa data query language, ou linguagem de consulta de dados

INSERT INTO [nome da tabela]([campos da tabela,])
VALUES ([valores de acordo com a ordem dos campos acima,]);

INSERT INTO [nome da tabela]([campos da tabela,])
SELECT [valores de acordo com a ordem dos campos acima,];

INSERT INTO banco (codigo, nome, data_criacao)
VALUES (100, 'Banco do Brasil', now());

INSERT INTO banco (codigo, nome, data_criacao)
SELECT 100, 'Banco do Brasil', now();

UPDATE [nome da tabela] SET
[campo1] = [novo valor do campo1],
[campo2] = [novo valor do campo2],
...
[WHERE + condições]

Atenção: muito cuidado com os updates. Sempre utilize-os com condição.

UPDATE banco SET
codigo = 500
WHERE codigo = 100;

UPDATE banco SET
data_criacao = now()
WHERE data_criacao IS NULL;

DELETE FROM [nome da tabela]
[WHERE + condições]

Atenção: muito cuidado com os deletes. Sempre utilize-os com condição.

DELETE FROM banco
WHERE codigo = 512;

DELETE FROM banco
WHERE nome = 'Conta Digital';

SELECT [campos da tabela]
FROM [nome da tabela]
[WHERE + condicoes]

Dicas de boas práticas = Evite sempre que puder o SELECT*

SELECT codigo, nome
FROM banco;

SELECT codigo, nome
FROM banco
WHERE data_criacao > '2019-10-15 15:00:00';

# DDL
Data Definition Language
Linguagem de definição de dados
CREATE, ALTER, DROP

CREATE [objeto][nome do objeto][opções];
ALTER [objeto][nome do objeto][opções];
DROP [objeto][nome do objeto][opções];

CREATE DATABASE dadosbancarios;
ALTER DATABASE dadosbancarios OWNER TO diretoria;
DROP DATABASE dadosbancarios;

CREATE SCHEMA IF NOT EXISTS bancos;
ALTER SCHEMA bancos OWNER TO diretoria;
DROP SCHEMA IF EXISTS bancos;

CREATE TABLE [IF NOT EXISTS][nome da tabela](
	[nome do campo][tipo][regras][opções],
	[nome do campo][tipo][regras][opções],
	[nome do campo][tipo][regras][opções]
);
ALTER TABLE [nome da tabela][opções];
DROP TABLE [nome da tabela];

CREATE TABLE IF NOT EXISTS banco (
	codigo INTEGER PRIMARY KEY,
	nome VARCHAR(50) NOT NULL,
	data_criacao TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS banco (
	codigo INTEGER,
	nome VARCHAR(50) NOT NULL,
	data_criacao TIMESTAMP NOT NULL DEFAULT NOW(),
	PRIMARY KEY(codigo)
);

ALTER TABLE banco ADD COLUMN tem_poupanca BOOLEAN;
DROP TABLE IF EXISTS banco;

https://github.com/drobcosta/digital_innovation_one



### Fundamentos da Structured Query Language (SQL)
## Revisão
# IDEMPOTÊNCIA
Propriedade que algumas ações/operações possuem possibilitando-as de serem executadas diversas vezes sem alterar o resultado após a aplicação inicial.
	IF EXISTS
	Comandos pertinentes ao DDL e DML

# Melhores práticas em DDL
Importante as tabelas possúrem campos que realmente serão utilizados e que sirvam de atributo direto a um objetivo em comum.
	- Criar/Acrescentar colunas que são "atributos básicos" do objeto;
	Exemplo: tabela CLIENTE: coluna TELEFONE / coluna AGENCIA_BANCARIA
	- Cuidado com regras (constraints)
	- Cuidado com o excesso de FKs
	- Cuidado com o tamanho indevido de colunas
	Exemplo: coluna CEP VARCHAR(255)

## DML / CRUD
# SELECT
SELECT (campos)
FROM tabela
[condicoes]

Exemplo:

SELECT numero, nome FROM banco;
SELECT numero, nome FROM banco WHERE ativo IS TRUE;
SELECT nome FROM cliente WHERE email LIKE '%gmail.com';

SELECT numero FROM agencia
WHERE banco_numero IN (SELECT numero FROM banco WHERE nome ILIKE '%Bradesco%')
-- LIKE: Case sensitive
-- ILIKE: Sem case sensitive

# SELECT - Condição (WHERE/AND/OR)
WHERE (coluna/condição):
	=
	> / >=
	< / <=
	<> / !=
	LIKE
	ILIKE
	IN
Primeira condição sempre WHERE.
Demais condições, AND ou OR.

# SELECT - Idempotência
SELECT (campos)
FROM tabela1
WHERE EXISTS (
	SELECT (campo)
	FROM tabela2
	WHERE campo1 = valor1
	[AND/OR campoN = valorN]
);

Não é uma boa prática.
Melhor prática utilizar LEFT JOIN.

# SELECT* (evitar)

# INSERT
INSERT (campos da tabela) VALUES (valores);
INSERT (campos da tabela) SELECT (valores);

# INSERT - IDEMPOTÊNCIA
INSERT INTO agencia (banco_numero, numero, nome) VALUES (341,1,'Centro da cidade');

INSERT INTO agencia (banco_numero, numero, nome)
SELECT 341,1,'Centro da cidade'
WHERE NOT EXISTS (SELECT banco_numero, numero, nome FROM agencia WHERE banco_numero = 341 AND numero = 1 AND nome = 'Centro da cidade');

- ON CONFLICT
INSERT INTO agencia (banco_numero, numero, nome) VALUES 
(341,1,'Centro da cidade') ON CONFLICT (banco_numero, numero) DO NOTHING;

# UPDATE
UPDATE (tabela) SET campo1 = novo_valor WHERE (condição);

# DELETE
DELETE FROM (tabela) SET campo1 = novo_valor WHERE (condição);


## TRUNCATE
# Definição
"Esvazia" a tabela.
TRUNCATE [TABLE][ONLY]name[*][, ...]
	[RESTART IDENTITY | CONTINUE IDENTITY][CASCADE | RESTRICT]


## Funções Agregadas em PostgreSQL
https://www.postgresql.org/docs/11/functions-aggregate.html
# AVG
# COUNT (opção: HAVING)
# MAX
# MIN
# SUM


## JOINs
# Definição
- JOIN (INNER)
SELECT tabela_1.campos, tabela_2.campos
FROM tabela_1
JOIN tabela_2
	ON tabela_2.campo = tabela_1.campo

- LEFT JOIN (OUTER)
SELECT tabela_1.campos, tabela_2.campos
FROM tabela_1
LEFT JOIN tabela_2
	ON tabela_2.campo = tabela_1.campo

- RIGHT JOIN (OUTER)
SELECT tabela_1.campos, tabela_2.campos
FROM tabela_1
RIGHT JOIN tabela_2
	ON tabela_2.campo = tabela_1.campo

- FULL JOIN (OUTER)
SELECT tabela_1.campos, tabela_2.campos
FROM tabela_1
FULL JOIN tabela_2
	ON tabela_2.campo = tabela_1.campo

- CROSS JOIN
Todos os dados de uma tabela serão cruzados com todos os dados da tabela referenciada no CROSS JOIN criando uma matriz.

SELECT tabela_1.campos, tabela_2.campos
FROM tabela_1
CROSS JOIN tabela_2


## Otimizando o código com CTE (Common Table Expressions)
# Definição
Forma auxiliar de organizar "statements", ou seja, blocos de códigos, para consultas muito grandes, gerando tabelas temporárias e criando relacionamentos entre elas.
Dentro dos statements podem ter SELECTs, INSERTs, UPDATEs ou DELETEs.

# WITH STATEMENTS
WITH [nome1] AS (
	SELECT (campos,)
	FROM tabela_A
	[WHERE]
), [nome2] AS (
	SELECT (campos,)
	FROM tabela_B
	[WHERE]
)
SELECT [nome1].(campos,),[nome2].(campos,)
FROM [nome1]
JOIN [nome2] ...


### Comandos avançados da Structured Query Language (SQL)
## Como as views auxiliam no acesso ao banco de dados
# Definição
View são visões.
São "camadas" para as tabelas.
São "alias" para uma ou mais queries.
Aceitam comandos de SELECT, INSERT, UPDATE e DELETE.

CREATE [OR REPLACE][TEMP | TEMPORARY][RECURSIVE] VIEW name[(column_name[, ...])]
	[WITH (view_option_name [=view_option_value][, ...])]
	AS query
	[WITH [CASCADED | LOCAL] CHECK OPTION]

# IDEMPOTÊNCIA

CREATE OR REPLACE VIEW vw_banco AS (
	SELECT numero, nome, ativo
	FROM banco
);

SELECT numero, nome, ativo
FROM vw_bancos;

CREATE OR REPLACE VIEW vw_bancos (banco_numero, banco_nome, banco_ativo) AS (
	SELECT numero, nome, ativo
	FROM banco
);

SELECT banco_numero, banco_nome, banco_ativo
FROM vw_bancos;

# INSERT, UPDATE e DELETE

CREATE OR REPLACE VIEW vw_bancos AS (
	SELECT numero, nome, ativo
	FROM banco
);

SELECT numero, nome, ativo
FROM vw_bancos;

- Funcionam apenas para VIEWs com apenas 1 tabela

INSERT INTO vw_bancos (numero, nome, ativo) VALUES (100, 'Banco CEM',TRUE);

UPDATE vw_bancos SET nome = 'Banco 100' WHERE numero = 100;

DELETE FROM vw_bancos WHERE numero = 100;

# TEMPORARY

CREATE OR REPLACE TEMPORARY VIEW vw_bancos AS (
	SELECT numero, nome, ativo
	FROM banco
);

SELECT numero, nome, ativo
FROM vw_bancos;

VIEW presente apenas na sessão do usuário.
Se você se desconectar e conectar novamente, a VIEW não estará disponível.

# RECURSIVE

CREATE OR REPLACE RECURSIVE VIEW (nome_da_view)(campos_da_view) AS (
	SELECT base
	UNION ALL
	SELECT campos
	FROM tabela_base
	JOIN (nome_da_view)
);

- Obrigatório a existência dos campos da VIEW
- UNION ALL

# WITH OPTIONS

CREATE OR REPLACE VIEW vw_bancos AS (
	SELECT numero, nome, ativo
	FROM banco
);

INSERT INTO vw_bancos (numero, nome, ativo) VALUES (100,'Banco CEM',FALSE)
-- OK

CREATE OR REPLACE VIEW vw_bancos AS (
	SELECT numero, nome, ativo
	FROM banco
	WHERE ativo IS TRUE
) WITH LOCAL CHECK OPTION;

INSERT INTO vw_bancos (numero, nome, ativo) VALUES (100,'Banco CEM',FALSE)
-- ERRO


CREATE OR REPLACE VIEW vw_bancos_ativos AS (
	SELECT numero, nome, ativo
	FROM banco
	WHERE ativo IS TRUE
) WITH LOCAL CHECK OPTION;

CREATE OR REPLACE VIEW vw_bancos_maiores_que_100 AS (
	SELECT numero, nome, ativo
	FROM vw_banco
	WHERE numero > 100
) WITH LOCAL CHECK OPTION;

INSERT INTO vw_bancos_maiores_que_100 (numero, nome, ativo) VALUES (99, 'Banco DIO', FALSE)
--ERRO

INSERT INTO vw_bancos_maiores_que_100 (numero, nome, ativo) VALUES (200, 'Banco DIO', FALSE)
--ERRO


CREATE OR REPLACE VIEW vw_bancos_ativos AS (
	SELECT numero, nome, ativo
	FROM banco
	WHERE ativo IS TRUE
);

CREATE OR REPLACE VIEW vw_bancos_maiores_que_100 AS (
	SELECT numero, nome, ativo
	FROM vw_banco
	WHERE numero > 100
) WITH LOCAL CHECK OPTION;

INSERT INTO vw_bancos_maiores_que_100 (numero, nome, ativo) VALUES (99, 'Banco DIO', FALSE)
--ERRO

INSERT INTO vw_bancos_maiores_que_100 (numero, nome, ativo) VALUES (200, 'Banco DIO', FALSE)
--OK


CREATE OR REPLACE VIEW vw_bancos_ativos AS (
	SELECT numero, nome, ativo
	FROM banco
	WHERE ativo IS TRUE
);

CREATE OR REPLACE VIEW vw_bancos_maiores_que_100 AS (
	SELECT numero, nome, ativo
	FROM vw_banco
	WHERE numero > 100
) WITH CASCADED CHECK OPTION;
-- CASCADED valida as opções da VIEW atual e as que faz referência

INSERT INTO vw_bancos_maiores_que_100 (numero, nome, ativo) VALUES (99, 'Banco DIO', FALSE)
--ERRO

INSERT INTO vw_bancos_maiores_que_100 (numero, nome, ativo) VALUES (200, 'Banco DIO', FALSE)
--ERRO


## Conheça um dos principais conceitos de banco de dados: Transações
# Definição
Conceito fundamental de todos os sistemas de bancos de dados.
Conceito de múltiplas etapas/códigos reunidos em apenas 1 transação, onde o resultado precisa ser tudo ou nada.

Exemplos:
BEGIN;
	UPDATE conta SET valor = valor - 100.00
	WHERE nome = 'Alice';

	UPDATE conta SET valor = valor + 100.00
	WHERE nome = 'Bob';
COMMIT; / ROLLBACK;

BEGIN;
	UPDATE conta SET valor = valor - 100.00
	WHERE nome = 'Alice';

SAVEPOINT my_savepoint;
	UPDATE conta SET valor = valor + 100.00
	WHERE nome = 'Bob';
	-- oops ... não é para o Bob, é para o Wally!!!
ROLLBACK TO my_savepoint;
	UPDATE conta SET valor = valor + 100.00
	WHERE nome = 'Wally';
COMMIT;


## Conheça as Funções que podem ser criadas pelo desenvolvedor
# Definição
Conjunto de códigos que são executados dentro de uma transação com a finalidade de facilitar a programação e obter o reaproveitamento/reutilização de códigos.
Existem 4 tipos de funções:
- query language functions (funções escritas em SQL)
- procedural language functions (funções escritas em, por exemplo, PL/pgSQL ou PL/py)
- internal functions
- C-language functions

Porém, o foco aqui é falar sobre USER DEFINED FUNCTIONS.
Funções que podem ser criadas pelo usuário.

# Linguagens
- SQL
- PL/PGSQL
- PL/PY
- PL/PHP
- PL/RUBY
- PL/Java
- PL/Lua
https://www.postgresql.org/docs/11/external-pl.html

# Definição
CREATE [OR REPLACE] FUNCTION
	name ([argmode][argname]argtype[{DEFAULT | =}default)expr][, ...])
	[RETURNS rettype
	 | RETURNS TABLE (column_name column_type [, ...])]
	{LANGUAGE lang_name
	 | TRANSFORM {FOR TYPE type_name}[, ...]
	 | WINDOW
	 | IMMUTABLE | STABLE | VOLATILE | [NOT]LEAKPROOF
	 | CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT
	 | [EXTERNAL]SECURITY INVOKER | [EXTERNAL]SECURITY DEFINER
	 | PARALLEL {UNSAFE | RESTRICTED | SAFE}
	 | COST execution_cost
	 | ROWS result_rows
	 | SET configuration_parameter {TO value | = value | FROM CURRENT}
	 | AS 'definition'
	 | AS 'obj_file', 'link_symbol'
}...

# IDEMPOTÊNCIA
CREATE OR REPLACE FUNCTION [nome da função]

- Mesmo nome
- Mesmo tipo de retorno
- Mesmo número de parâmetros/argumentos

# RETURNS
- Tipo de retorno (data type)
	INTEGER
	CHAR / VARCHAR
	BOOLEAN
	ROW
	TABLE
	JSON

# LANGUAGE
- SQL
- PLPGSQL
- PLJAVA
- PLPY
- ...

# SEGURANÇA
- SECURITY
	INVOKER
	DEFINER

# COMPORTAMENTO
- IMMUTABLE
Não pode alterar o banco de dados.
Funções que garantem o mesmo resultado para os mesmos argumentos/parâmetros da função. Evitar a utilização de selects, pois tabelas podem sofrer alterações.

- STABLE
Não pode alterar o banco de dados.
Funções que garantem o mesmo resultado para os mesmos argumentos/parâmetros da função. Trabalha melhor com tipos de current_timestamp e outros tipos variáveis. Podem conter selects.

- VOLATILLE
Comportamento padrão. Aceita todos os cenários.

# SEGURANÇA E BOAS PRÁTICAS
- CALLED ON NULL INPUT
Padrão.
Se qualquer um dos parâmetros/argumentos for NULL, a função será executada.
-RETURNS NULL ON NULL INPUT
Se qualquer um dos parâmetros/argumentos for NULL, a função retornará NULL.
- SECURITY INVOKER
Padrão.
A função é executada com as permissões de quem executa.
- SECURITY DEFINER
A função é executada com as permissões de quem criou a função.

# RECURSOS
- COST
Custo/row em unidades de CPU
- ROWS
Número estimado de linhas que será analisada pelo planner

# SQL FUNCTIONS
Não é possível utilizar TRANSAÇÕES

CREATE OR REPLACE FUNCTION fc_somar(INTEGER,INTEGER)
RETURNS INTEGER
LANGUAGE SQL
AS $$
	SELECT $1 + $2;
$$;

CREATE OR REPLACE FUNCTION fc_somar(num1 INTEGER, num2 INTEGER)
RETURNS INTEGER
LANGUAGE SQL
AS $$
	SELECT num1 + num2;
$$;

CREATE OR REPLACE FUNCTION fc_bancos_add(p_numero INTEGER, p_nome VARCHAR, p_ativo BOOLEAN)
RETURNS TABLE (numero INTEGER, nome VARCHAR)
RETURNS NULL ON NULL INPUT
LANGUAGE SQL
AS $$
	INSERT INTO banco (numero, nome, ativo)
	VALUES (p_numero, p_nome, p_ativo);

	SELECT numero, nome
	FROM banco
	WHERE numero = p_numero;
$$;

# PLPGSQL

CREATE OR REPLACE FUNCTION banco_add (p_numero INTEGER, p_nome VARCHAR, p_ativo BOOLEAN)
RETURNS BOOLEAN
LANGUAGE PLPGSQL
AS $$
DECLARE variavel_id INTEGER;
BEGIN
	SELECT INTO variavel_id numero FROM banco WHERE nome = p_nome;
	IF variavel_id IS NULL THEN
		INSERT INTO banco(numero, nome, ativo) VALUES (p_numero, p_nome, p_ativo);
	ELSE
		RETURN FALSE;
	END IF;

	SELECT INTO variavel_id numero FROM banco WHERE nome = p_nome;

	IF variavel_id IS NULL THEN
		RETURN FALSE;
	ELSE
		RETURN TRUE;
	END IF;
END; $$;

SELECT banco_add(13,'Banco azarado',true);